{"version":3,"sources":["index.js"],"names":["Square","props","temp","winner","String","value","toLowerCase","className","bold","onClick","Board","i","this","stepAt","line","includes","JSON","stringify","calculateWinner2","squares","key","items","items_temp","j","k","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","asc","slice","length","calculateWinner","setState","concat","step","move","type","a","b","dict","0","1","2","3","4","5","6","7","8","status","current","moves","map","_step","desc","colRowMove","jumpTo","order","handleClick","handleToggle","lines","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e188065.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  const temp = props.winner + ' square color_' + String(props.value).toLowerCase() + ' '\n  const className = props.bold ? temp + 'bold': temp;\n  return (\n    <button \n      className={className}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const bold = this.props.stepAt === i ? true : false\n    const line = this.props.winner\n    const winner = line && line.includes(i) ? calculateWinner2(line) : \"\"\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        bold={bold}\n        key={i}\n        winner={winner}\n      />\n    );\n  }\n\n  render() {\n    const n = 3\n    const items=[]\n    for(var i=0;i<n;i++){\n      const items_temp = []\n      for(var j=0;j<n;j++) {\n        var k=i*n+j\n        items_temp.push(this.renderSquare(k))\n      }\n      items.push(<div key={i} className=\"board-row\">{items_temp}</div>)\n    }\n    return (\n    <div>{items}</div>\n    )\n    // return (\n    //   <div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(0)}\n    //       {this.renderSquare(1)}\n    //       {this.renderSquare(2)}\n    //     </div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(3)}\n    //       {this.renderSquare(4)}\n    //       {this.renderSquare(5)}\n    //     </div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(6)}\n    //       {this.renderSquare(7)}\n    //       {this.renderSquare(8)}\n    //     </div>\n    //   </div>\n    // );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      asc: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares, 0) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleToggle() {\n    this.setState({\n      asc: !this.state.asc,\n    });\n  }\n\n  colRowMove(move, type) {\n    if (move!==0) {\n      const history = this.state.history;\n      var a = history[move].squares;\n      var b = history[move-1].squares;\n      const dict = {\n        0:\"(Col:1,Row:1)\",\n        1:\"(Col:2,Row:1)\",\n        2:\"(Col:3,Row:1)\",\n        3:\"(Col:1,Row:2)\",\n        4:\"(Col:2,Row:2)\",\n        5:\"(Col:3,Row:2)\",\n        6:\"(Col:1,Row:3)\",\n        7:\"(Col:2,Row:3)\",\n        8:\"(Col:3,Row:3)\",\n      };\n      for(var i=0;i<a.length;i++) \n        if(a[i]!==b[i])\n          if(type === 0)\n            return dict[i];\n          else if(type === 1)\n            return i;\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const step = this.state.stepNumber;\n    const current = history[step];\n    const winner = calculateWinner(current.squares, 0);\n\n    const moves = history.map((_step, move) => {\n      move = this.state.asc ? move : history.length-1 - move;\n      const desc = move ?\n        'Go to move #' + move + ' '+ this.colRowMove(move,0):\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = (step !== 9) ? 'Next player: ' + (this.state.xIsNext ? 'X' : 'O') : 'Draw';\n    }\n    let order = this.state.asc ? 'descending' : 'ascending';\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            stepAt={this.colRowMove(step,1)}\n            winner={calculateWinner(current.squares, 1)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.handleToggle()}>\n            Change to {order}\n          </button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares, type) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return type === 0 ? squares[a] : lines[i];\n    }\n  }\n  return null;\n}\n\nfunction calculateWinner2(line) {\n  const lines = {\n    \"[0,1,2]\":\"winner horizontal\",\n    \"[3,4,5]\":\"winner horizontal\",\n    \"[6,7,8]\":\"winner horizontal\",\n    \"[0,3,6]\":\"winner vertical\",\n    \"[1,4,7]\":\"winner vertical\",\n    \"[2,5,8]\":\"winner vertical\",\n    \"[0,4,8]\":\"winner diag1\",\n    \"[2,4,6]\":\"winner diag2\",\n  };\n  return lines[JSON.stringify(line)]\n\n  // does not work, cant compare arrays like this in javascript\n\n  // const line1 = [[0,1,2],[3,4,5],[6,7,8]]\n  // const line2 = [[0,3,6],[1,4,7],[2,5,8]]\n  // const line3 = [[0,4,8]]\n  // const line4 = [[2,4,6]]\n  // if(line in line1)\n  //   return \"win_horizontal\";\n  // if(line in line2)\n  //   return \"win_vertical\";\n  // if(line in line3)\n  //   return \"win_diag1\";\n  // if(line in line4)\n  //   return \"win_diag2\";\n}\n\n"],"sourceRoot":""}